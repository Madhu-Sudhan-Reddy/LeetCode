class Solution {
    public int maximumSetSize(int[] nums1, int[] nums2) {
        Set<Integer> s=new HashSet<>();
        Set<Integer> t=new HashSet<>();int count=0;
        int a=nums1.length,b=nums2.length;
        for(int i=0;i<a;i++){
            s.add(nums1[i]);
        }
        for(int i=0;i<b;i++){
            if(t.add(nums2[i])){
            if(s.contains(nums2[i]))
            count++;
            }
        }
        if(s.size()<=a/2&&t.size()<=b/2){
            return s.size()+t.size()-count;
        }
        else if(s.size()<=a/2&&t.size()>b/2&&t.size()-count<=b/2){
            return s.size()+t.size()-count;
        }
        else if(s.size()<=a/2&&t.size()>b/2&&t.size()-count>b/2){
            return s.size()+b/2;//
        }
        else if(t.size()<=b/2&&s.size()>a/2&&s.size()-count<=a/2){
            return s.size()+t.size()-count;
        }
        else if(t.size()<=b/2&&s.size()>a/2&&s.size()-count>a/2){
            System.out.println(s.size()+" "+t.size());
            return a/2+t.size();//
        }
        else if(t.size()>b/2&&s.size()>a/2&&s.size()-count>a/2&&t.size()-count>b/2){
            return a/2+b/2;
        }
        else if(t.size()>b/2&&s.size()>a/2&&s.size()-count>a/2&&t.size()-count<=b/2){
            return a/2+b/2;
        }
        else if(t.size()>b/2&&s.size()>a/2&&s.size()-count<=a/2&&t.size()-count>b/2){
            return a/2+b/2;
        }
        else if(t.size()>b/2&&s.size()>a/2&&s.size()-count<=a/2&&t.size()-count<=b/2){
            if(s.size()+t.size()-count<=a/2+b/2)
            return s.size()+t.size()-count;
            return a/2+b/2;
        }

return 0;
    }
}