class Solution {
    public boolean isNumInRow(char[][] board,int row,int col,char number){
        for(int i=0;i<board.length;i++)
        if(board[row][i]==number&&col!=i)
        return true;
        return false;
    }
     public boolean isNumInCol(char[][] board,int row,int col,char number){
        for(int i=0;i<board.length;i++)
        if(board[i][col]==number&&row!=i)
        return true;
        return false;
    }
     public boolean isNumInLocalBox(char[][] board,int row, int col, char number){
         int nRow=row-row%3;
         int nCol=col-col%3;
        for(int i=nRow;i<nRow+3;i++)
        for(int j=nCol;j<nCol+3;j++)
        if(board[i][j]==number&&!(i==row&&j==col))
        return true;
        return false;
    }
    public boolean isValid(char[][] board,int row,int col,char number){
        return !(isNumInRow(board,row,col,number)||isNumInCol(board,row,col,number)||isNumInLocalBox(board,row,col,number));
    }
    public boolean isValidSudoku(char[][] board) {
     for(int i=0;i<9;i++)
     {
         for(int j=0;j<9;j++){
             if(board[i][j]!='.'){
                 if(!isValid(board,i,j,board[i][j]))
                 {System.out.println(i+" "+j+" "+board[i][j]);
                     return false;
                 }
             }
         }
     }
     return true;

        /*
        List<Character> ls=new ArrayList<>();
        Set<Character> hs=new HashSet<>();
     for(int i=0;i<9;i++)
     {
         for(int j=0;j<9;j++){
             if(board[i][j]!='.'){
             ls.add(board[i][j]);
             hs.add(board[i][j]);
             }
         }
         if(ls.size()!=hs.size())
         return false;
         ls=new ArrayList<Character>();hs=new HashSet<Character>();
     }   
              ls=new ArrayList<Character>();hs=new HashSet<Character>();

     for(int j=0;j<9;j++)
     {
         for(int i=0;i<9;i++){
             if(board[i][j]!='.'){
             ls.add(board[i][j]);
             hs.add(board[i][j]);
             }
         }
         if(ls.size()!=hs.size())
         return false;
                  ls=new ArrayList<Character>();hs=new HashSet<Character>();

     }   
              ls=new ArrayList<Character>();hs=new HashSet<Character>();
              
for(int i=0;i<9;i+=3)
     {
         for(int j=0;j<9;j+=3){
             for(int m=i;m<i+3;m++){
                 for(int n=j;n<j+3;n++){
                     if(board[m][n]!='.'){
             ls.add(board[m][n]);
             hs.add(board[m][n]);
             }
                 }
                
                 
             }
 System.out.println(ls);
                 System.out.println(hs);
             if(ls.size()!=hs.size())
         return false;
        ls=new ArrayList<Character>();hs=new HashSet<Character>();
             
         }
    }

         return true;
         */
    }
}